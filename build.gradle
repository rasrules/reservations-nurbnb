plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'info.solidsoft.pitest' version '1.7.4' apply false
    id 'jacoco'
    id 'com.adarshr.test-logger' version '3.2.0' // TODO: Check why not working
    id 'org.flywaydb.flyway' version '8.1.0'
    id 'org.sonarqube' version '3.5.0.2730'
}

apply plugin: 'info.solidsoft.pitest.aggregator'

sonarqube {
    properties {
        property "sonar.projectKey", "rasrules_reservations-nurbnb"
        property "sonar.organization", "rasrules"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.issue.ignore.multicriteria", "S5960"
        property "sonar.issue.ignore.multicriteria.S5960.resourceKey", "src/main/java/**/*"
        property "sonar.issue.ignore.multicriteria.S5960.ruleKey", "java:S5960"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'
    apply plugin: 'jacoco'

    // pitest {
    //     junit5PluginVersion = '0.15'
    //     useClasspathFile = true

    //     if(project.name in ['startup']) {
    //         failWhenNoMutations = false
    //     }

    //     // Export for aggregation
    //     outputFormats = [ "XML" ]
    //     exportLineCoverage = true
    //     timestampedReports = false
    // }

    dependencies {
        if(project.name in ['adapter-persistence-jpa']){
            apply plugin: "org.flywaydb.flyway"
            implementation 'org.flywaydb:flyway-core:8.1.0'
        }
    }

    sonarqube {
        properties {
            property "sonar.sources", "src/main"
            property "sonar.test.inclusions", "src/test"
            property "sonar.jacoco.coverage.reportPaths", "$buildDir/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
            property "sonar.junit.reportsPaths", "$buildDir/test-results/"
        }
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
        }
    }

    task codeCoverage {
        dependsOn jacocoTestReport
    }
}

allprojects {
    group = 'com.nurbnb.reservation'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    configurations {
        compileOnly.extendsFrom annotationProcessor
        testCompileOnly.extendsFrom annotationProcessor
        testAnnotationProcessor.extendsFrom annotationProcessor
    }

    repositories {
        mavenCentral()
    }

    // TODO: VC: Move these files into respective modules
    dependencies {
        compileOnly 'org.springframework.boot:spring-boot-starter-webflux:3.0.1' // Needed for HTTP client
        compileOnly 'org.projectlombok:lombok'

        annotationProcessor 'org.projectlombok:lombok'

        implementation 'net.sizovs:pipelinr:0.7'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.0'
        testImplementation 'org.codehaus.groovy:groovy-all:3.0.11'
        testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
        testImplementation 'com.athaydes:spock-reports:2.3.0-groovy-3.0', { transitive = false }
        testImplementation 'au.com.dius:pact-jvm-consumer-junit5:4.0.10' // NOTE: For contract testing
        testImplementation 'au.com.dius:pact-jvm-consumer-java8:4.0.10' // NOTE: For contract testing
        testImplementation 'au.com.dius:pact-jvm-provider-junit5:4.0.10' // NOTE: For contract testing
    }

    // gradle.taskGraph.whenReady { graph ->
    //     if (graph.hasTask(':test')) {
    //         test.dependsOn(':testPrerequisite')
    //     }
    // }

    test {

        useJUnitPlatform()

        testLogging {
            events "failed", "skipped"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
        }

        finalizedBy jacocoTestReport
    }

}

// task testPrerequisite{
//     dependsOn 'adapter-persistence-jpa:flywayMigrate'
// }

task coreTest {
    dependsOn 'core:test'
}



// task systemTest {
//     dependsOn 'startup:test'
// }

task runApp {
    dependsOn 'startup:bootRun'
}

task coreCodeCoverage {
    dependsOn 'core:codeCoverage'
}

// task coreMutationTest {
//     dependsOn 'core:pitest'
// }

task installLocalGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks')}
    fileMode 0775
}

build.dependsOn installLocalGitHook

bootJar {
    enabled = false
}

jar {
    enabled = true
}
